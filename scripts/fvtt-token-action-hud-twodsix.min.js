const t={ID:"fvtt-token-action-hud-twodsix"},e={ID:"token-action-hud-core"},i="1.4",s={item:"tokenActionHud.twodsix.item",characteristics:"TWODSIX.Damage.Characteristics",utility:"tokenActionHud.utility"},n={armor:{id:"armor",name:"TYPES.Item.armor",type:"system"},augment:{id:"augment",name:"TYPES.Item.augmentPl",type:"system"},characteristics:{id:"characteristics",name:"TWODSIX.Damage.Characteristics",type:"system"},equipment:{id:"equipment",name:"TYPES.Item.equipmentPl",type:"system"},consumable:{id:"consumable",name:"TYPES.Item.consumablePl",type:"system"},backpack:{id:"backpack",name:"TWODSIX.Actor.Items.LocationState.backpack",type:"system"},ship:{id:"ship",name:"TWODSIX.Actor.Items.LocationState.ship",type:"system"},skills:{id:"skills",name:"TYPES.Item.skillPl",type:"system"},spell:{id:"spell",name:"TYPES.Item.spellPl",type:"system"},weapons:{id:"weapons",name:"TYPES.Item.weaponPl",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},tool:{id:"tool",name:"TYPES.Item.toolPl",type:"system"},trait:{id:"trait",name:"TYPES.Item.traitPl",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},a={armor:{groupId:"armor"},augment:{groupId:"augment"},backpack:{groupId:"backpack"},consumable:{groupId:"consumable"},computer:{groupId:"equipment"},equipment:{groupId:"equipment"},ship:{groupId:"ship"},skills:{groupId:"skills"},spell:{groupId:"spell"},treasure:{groupId:"treasure"},trait:{groupId:"trait"},tool:{groupId:"equipment"},junk:{groupId:"equipment"},weapon:{groupId:"weapons"}},o={strength:"STR",dexterity:"DEX",endurance:"END",intelligence:"INT",education:"EDU",socialStanding:"SOC",psionicStrength:"PSI",stamina:"STA",lifeblood:"LFB",alternative1:"ALT1",alternative2:"ALT2"};let r=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{r=class Utils{static getSetting(i,s=null){let n=s??null;try{n=game.settings.get(t.ID,i)}catch{e.api.Logger.debug(`Setting '${i}' not found`)}return n}static async setSetting(i,s){try{s=await game.settings.set(t.ID,i,s),e.api.Logger.debug(`Setting '${i}' set to '${s}'`)}catch{e.api.Logger.debug(`Setting '${i}' not found`)}}}}));let c=null;function shouldDisplayChar(t){const e=game.settings.get("twodsix","showAlternativeCharacteristics");switch(t){case"strength":case"dexterity":case"endurance":case"intelligence":case"education":case"socialStanding":return!0;case"psionicStrength":return"alternate"!==e;case"alternative1":case"alternative2":return"base"!==e;default:return!1}}Hooks.once("tokenActionHudCoreApiReady",(async t=>{c=class ActionHandler extends t.api.ActionHandler{async buildSystemActions(e){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=r.getSetting("displayUnequipped"),this.sortByType=r.getSetting("sortByType"),this.actor){let e=this.actor.items;e=t.api.Utils.sortItemsByName(e),this.items=e}["traveller","robot","animal"].includes(this.actorType)&&this.#t()}#t(){this.#e(),this.#i()}#s(){}async#e(){if(0===this.items.size)return;const e="item",i=new Map;for(const[t,e]of this.items){let s=e.type;const n="equipped"===e.system.equipped||["skills","trait","spell"].includes(e.type);if(n||this.displayUnequipped){n||this.sortByType||(s=e.system.equipped);const a=i.get(s)??new Map;a.set(t,e),i.set(s,a)}}for(const[n,o]of i){const i=a[n]?.groupId;if(!i)continue;const r={id:i,type:"system"},c=[...o].map((([i,n])=>{const a=i,o=n.name,r=t.api.Utils.i18n(s[e]),c=`${r?`${r}: `:""}${o}`,l=[e,a].join(this.delimiter);return{id:a,name:o,img:n.img,listName:c,encodedValue:l}}));this.addActions(c,r)}}async#i(){const e="characteristics",i=[];for(const n in this.actor.system.characteristics)if(shouldDisplayChar(n)){const a=n,o=this.actor.system.characteristics[n].displayShortLabel,r=t.api.Utils.i18n(s[e]),c=`${r?`${r}: `:""}${o}`,l=[e,a].join(this.delimiter);i.push({id:a,name:o,listName:c,encodedValue:l})}this.addActions(i,{id:"characteristics",type:"system"})}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=n;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const i=Object.values(e);l={layout:[{nestId:"inventory",id:"inventory",name:t.api.Utils.i18n("TWODSIX.Items.Items.Inventory"),groups:[{...e.weapons,nestId:"inventory_weapons"},{...e.armor,nestId:"inventory_armor"},{...e.augment,nestId:"inventory_augment"},{...e.equipment,nestId:"inventory_equipment"},{...e.consumable,nestId:"inventory_consumable"},{...e.tool,nestId:"inventory_tool"},{...e.backpack,nestId:"inventory_backpack"},{...e.ship,nestId:"inventory_ship"}]},{nestId:"skills",id:"skills",name:t.api.Utils.i18n("TYPES.Item.skillPl"),groups:[{...e.skills,nestId:"skills_skills"}]},{nestId:"characteristics",id:"characteristics",name:t.api.Utils.i18n("TWODSIX.Damage.Characteristics"),groups:[{...e.characteristics,nestId:"characteristics_characteristics"}]},{nestId:"trait",id:"trait",name:t.api.Utils.i18n("TYPES.Item.traitPl"),groups:[{...e.trait,nestId:"trait_trait"}]},{nestId:"spell",id:"spell",name:t.api.Utils.i18n("TYPES.Item.spellPl"),groups:[{...e.spell,nestId:"spell_spell"}]},{nestId:"utility",id:"utility",name:t.api.Utils.i18n("tokenActionHud.utility"),groups:[{...e.combat,nestId:"utility_combat"},{...e.token,nestId:"utility_token"},{...e.rests,nestId:"utility_rests"},{...e.utility,nestId:"utility_utility"}]}],groups:i}}));let d=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.twodsix.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.twodsix.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"sortByType",{name:game.i18n.localize("tokenActionHud.twodsix.settings.sortByType.name"),hint:game.i18n.localize("tokenActionHud.twodsix.settings.sortByType.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class RollHandler extends t.api.RollHandler{async doHandleActionEvent(t,e){const i=e.split("|");2!==i.length&&super.throwInvalidValueErr();const s=i[0],n=i[1];if(["item"].includes(s)&&this.isRenderItem())return this.doRenderItem(this.actor,n);const a=["traveller","animal","robot"];if(this.actor)return void await this.#n(t,this.actor,this.token,s,n);const o=canvas.tokens.controlled.filter((t=>a.includes(t.actor?.type)));for(const e of o){const i=e.actor;await this.#n(t,i,e,s,n)}}async#n(t,e,i,s,n){switch(s){case"item":this.#a(t,e,n);break;case"characteristics":this.#o(t,e,n);break;case"utility":this.#r(i,n)}}#a(t,e,i){const s=e.items.get(i);if("trait"===s.type||"spell"===s.type){const t=`<div style="display: inline-flex;"><img src="${s.img}" alt="" class="chat-image"></img><span style="align-self: center; text-align: center; padding-left: 1ch;"><strong>${s.type.capitalize()}: ${s.name}</strong></span></div><br>${s.system.description}`;ChatMessage.create({content:t,speaker:ChatMessage.getSpeaker({actor:this.actor})})}else"weapon"===s.type?s.resolveUnknownAutoMode():s.skillRoll(!0)}#o(t,e,i){e.characteristicRoll({rollModifiers:{characteristic:e.system.characteristics[i].shortLabel}},!0)}async#r(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let p=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{p=class SystemManager extends t.api.SystemManager{doGetActionHandler(){return new c}getAvailableRollHandlers(){return{core:"Core Twodsix"}}doGetRollHandler(t){let e;return e=new d,e}doRegisterSettings(t){register(t)}async doRegisterDefaultFlags(){return l}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.4",SystemManager:p},Hooks.call("tokenActionHudSystemReady",e)}));export{s as ACTION_TYPE,c as ActionHandler,o as CHARACTERISTICS,e as CORE_MODULE,l as DEFAULTS,n as GROUP,a as ITEM_TYPE,t as MODULE,i as REQUIRED_CORE_MODULE_VERSION,d as RollHandler,p as SystemManager,r as Utils,register};
