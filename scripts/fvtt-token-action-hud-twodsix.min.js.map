{"version":3,"file":"fvtt-token-action-hud-twodsix.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'fvtt-token-action-hud-twodsix'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0'\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n    item: 'tokenActionHud.twodsix.item',\n    characteristics: 'TWODSIX.Damage.Characteristics',\n    utility: 'tokenActionHud.utility',\n    shipPosition: 'TYPES.Item.ship_position'\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    armor: { id: 'armor', name: 'TYPES.Item.armor', type: 'system' },\n    augment: { id: 'augment', name: 'TYPES.Item.augmentPl', type: 'system' },\n    characteristics: { id: 'characteristics', name: 'TWODSIX.Damage.Characteristics', type: 'system' },\n    equipment: { id: 'equipment', name: 'TYPES.Item.equipmentPl', type: 'system' },\n    consumable: { id: 'consumable', name: 'TYPES.Item.consumablePl', type: 'system' },\n    backpack: { id: 'backpack', name: 'TWODSIX.Actor.Items.LocationState.backpack', type: 'system' },\n    ship: { id: 'ship', name: 'TWODSIX.Actor.Items.LocationState.ship', type: 'system' },\n    base: { id: 'base', name: 'TWODSIX.Actor.Items.LocationState.base', type: 'system' },\n    vehicle: { id: 'vehicle', name: 'TWODSIX.Actor.Items.LocationState.vehicle', type: 'system' },\n    skills: { id: 'skills', name: 'TYPES.Item.skillPl', type: 'system' },\n    spell: { id: 'spell', name: 'TYPES.Item.spellPl', type: 'system' },\n    psiAbility: { id: 'psiAbility', name: 'TYPES.Item.psiAbility', type: 'system' },\n    weapons: { id: 'weapons', name: 'TYPES.Item.weaponPl', type: 'system' },\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    tool: { id: 'tool', name: 'TYPES.Item.toolPl', type: 'system' },\n    trait: { id: 'trait', name: 'TYPES.Item.traitPl', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' },\n    shipPosition: { id: 'shipPosition', name: 'TYPES.Item.ship_positionPl', type: 'system' },\n    shipActions: { id: 'shipActions', name: 'Ship Actions', type: 'system' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    armor: { groupId: 'armor' },\n    augment: { groupId: 'augment' },\n    backpack: { groupId: 'backpack' },\n    consumable: { groupId: 'consumable' },\n    computer: { groupId: 'equipment' },\n    equipment: { groupId: 'equipment' },\n    ship: { groupId: 'ship' },\n    vehicle: { groupId: 'vehicle' },\n    base: { groupId: 'base' },\n    skills: { groupId: 'skills' },\n    spell: { groupId: 'spell' },\n    psiAbility: { groupId: 'psiAbility' },\n    treasure: { groupId: 'treasure' },\n    trait: { groupId: 'trait' },\n    tool: { groupId: 'equipment' },\n    junk: { groupId: 'equipment' },\n    weapon: { groupId: 'weapons' },\n    shipPosition: { groupId: 'shipPosition' }\n}\n\n/**\n * Characteristics\n */\nexport const CHARACTERISTICS = {\n    strength: 'STR',\n    dexterity: 'DEX',\n    endurance: 'END',\n    intelligence: 'INT',\n    education: 'EDU',\n    socialStanding: 'SOC',\n    psionicStrength: 'PSI',\n    stamina: 'STA',\n    lifeblood: 'LFB',\n    alternative1: 'ALT1',\n    alternative2: 'ALT2',\n    alternative3: 'ALT3'\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE } from './constants.js'\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n     */\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        /**\n         * Build system actions\n         * Called by Token Action HUD Core\n         * @override\n         * @param {array} groupIds\n         */\n        async buildSystemActions (groupIds) {\n            // Set actor and token variables\n            this.actors = (!this.actor) ? this._getActors() : [this.actor]\n            this.actorType = this.actor?.type\n\n            // Settings\n            this.displayUnequipped = Utils.getSetting('displayUnequipped')\n            this.sortByType = Utils.getSetting('sortByType')\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            if (['traveller', 'robot', 'animal'].includes(this.actorType)) {\n                this.#buildCharacterActions()\n            } else if (this.actorType === 'ship') {\n                await this.#buildShipPositions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        #buildCharacterActions () {\n            this.#buildInventory()\n            this.#buildCharacteristics()\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        #buildMultipleTokenActions () {\n        }\n\n        /**\n         * Build inventory\n         * @private\n         */\n        #buildInventory () {\n            if (this.items.size === 0) return\n\n            const actionTypeId = 'item'\n            const inventoryMap = new Map()\n\n            for (const [itemId, itemData] of this.items) {\n                let type = itemData.type\n                const equipped = (itemData.system.equipped === 'equipped' || ['skills', 'trait', 'spell', 'psiAbility'].includes(itemData.type))\n\n                if (equipped || this.displayUnequipped) {\n                    if (!equipped && !this.sortByType) {\n                        type = itemData.system.equipped\n                    }\n                    const typeMap = inventoryMap.get(type) ?? new Map()\n                    typeMap.set(itemId, itemData)\n                    inventoryMap.set(type, typeMap)\n                }\n            }\n\n            for (const [type, typeMap] of inventoryMap) {\n                const groupId = ITEM_TYPE[type]?.groupId\n\n                if (!groupId) continue\n\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = [...typeMap].map(([itemId, itemData]) => {\n                    const id = itemId\n                    const name = itemData.name\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n                    const img = itemData.img\n\n                    return {\n                        id,\n                        name,\n                        img,\n                        listName,\n                        encodedValue\n                    }\n                })\n\n                // TAH Core method to add actions to the action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Return first selected actor when multiple are selected - kludge fix for not handling multiple actors\n         * @private\n         * @returns {object}\n         */\n        _getActors () {\n            return this.actors?.[0] ?? undefined\n        }\n\n        /**\n         * Build characteristics\n         * @private\n         */\n        #buildCharacteristics () {\n            const actionTypeId = 'characteristics'\n            const groupData = { id: 'characteristics', type: 'system' }\n            // const charShown = game.settings.get('twodsix', 'showAlternativeCharacteristics')\n\n            // Get actions\n            const actions = []\n            for (const char in this.actor.system.characteristics) {\n                if (shouldDisplayChar(char)) {\n                    const id = char\n                    const name = this.actor.system.characteristics[char].displayShortLabel\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n                    actions.push({\n                        id,\n                        name,\n                        listName,\n                        encodedValue\n                    })\n                }\n            }\n            // TAH Core method to add actions to the action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n        * Build ship positions\n        * @private\n        */\n        #buildShipPositions () {\n            const actionTypeId = 'ship_position'\n            const parentGroupData = { id: 'shipPosition', type: 'system' }\n            // Get positions\n            for (const position of this.actor.itemTypes.ship_position) {\n                const newPosition = {\n                    id: position.id,\n                    name: position.name,\n                    listName: `Group: ${position.name}`,\n                    type: 'system-derived'\n                }\n                this.addGroup(newPosition, parentGroupData)\n                const actions = []\n                for (const shipActionId of Object.keys(position.system.actions)) {\n                    const action = position.system.actions[shipActionId]\n                    actions.push({\n                        id: shipActionId,\n                        name: action.name,\n                        img: action.icon,\n                        encodedValue: [actionTypeId, position.id, shipActionId].join(this.delimiter)\n                    })\n                }\n                this.addActions(actions, newPosition)\n            }\n        }\n    }\n})\n\nfunction shouldDisplayChar (char) {\n    const charsShown = game.settings.get('twodsix', 'showAlternativeCharacteristics')\n    switch (char) {\n    case 'strength':\n        return true\n    case 'dexterity':\n        return true\n    case 'endurance':\n        return true\n    case 'intelligence':\n        return true\n    case 'education':\n        return true\n    case 'socialStanding':\n        return true\n    case 'psionicStrength':\n        return !['alternate', 'core'].includes(charsShown)\n    case 'alternative1':\n        return !['base', 'core'].includes(charsShown)\n    case 'alternative2':\n        return !['base', 'core'].includes(charsShown)\n    case 'alternative3':\n        return ['all'].includes(charsShown)\n    case 'lifeblood':\n        return false\n    case 'stamina':\n        return false\n    default:\n        return false\n    }\n}\n\n/**\n * Function to return a camel case version of a string\n * @param {string} string to be converted\n * @returns {object} a camel case version of input string\n * @export\n */\nexport function camelCase (string) {\n    return string.trim().toLowerCase().replace(/\\W+(.)/g, (m, chr) => chr.toUpperCase())\n}\n","import { GROUP } from './constants.js'\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'inventory',\n                id: 'inventory',\n                name: coreModule.api.Utils.i18n('TWODSIX.Items.Items.Inventory'),\n                groups: [\n                    { ...groups.weapons, nestId: 'inventory_weapons' },\n                    { ...groups.armor, nestId: 'inventory_armor' },\n                    { ...groups.augment, nestId: 'inventory_augment' },\n                    { ...groups.equipment, nestId: 'inventory_equipment' },\n                    { ...groups.consumable, nestId: 'inventory_consumable' },\n                    { ...groups.tool, nestId: 'inventory_tool' },\n                    { ...groups.backpack, nestId: 'inventory_backpack' },\n                    { ...groups.vehicle, nestId: 'inventory_vehicle' },\n                    { ...groups.ship, nestId: 'inventory_ship' },\n                    { ...groups.base, nestId: 'inventory_base' }\n                ]\n            },\n            {\n                nestId: 'skills',\n                id: 'skills',\n                name: coreModule.api.Utils.i18n('TYPES.Item.skillPl'),\n                groups: [\n                    { ...groups.skills, nestId: 'skills_skills' }\n                ]\n            },\n            {\n                nestId: 'characteristics',\n                id: 'characteristics',\n                name: coreModule.api.Utils.i18n('TWODSIX.Damage.Characteristics'),\n                groups: [\n                    { ...groups.characteristics, nestId: 'characteristics_characteristics' }\n                ]\n            },\n            {\n                nestId: 'trait',\n                id: 'trait',\n                name: coreModule.api.Utils.i18n('TYPES.Item.traitPl'),\n                groups: [\n                    { ...groups.trait, nestId: 'trait_trait' }\n                ]\n            },\n            {\n                nestId: 'psiAbility',\n                id: 'psiAbility',\n                name: coreModule.api.Utils.i18n('TYPES.Item.psiAbility'),\n                groups: [\n                    { ...groups.psiAbility, nestId: 'psiAbility_psiAbility' }\n                ]\n            },\n            {\n                nestId: 'spell',\n                id: 'spell',\n                name: coreModule.api.Utils.i18n('TYPES.Item.spellPl'),\n                groups: [\n                    { ...groups.spell, nestId: 'spell_spell' }\n                ]\n            },\n            {\n                nestId: 'shipActions',\n                id: 'shipActions',\n                name: 'Ship Actions',\n                groups: [\n                    { ...groups.shipPosition, nestId: 'shipActions_shipPosition' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","\nexport let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n     */\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n        /**\n         * Handle action click\n         * Called by Token Action HUD Core when an action event is left or right-clicked\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionClick (event, encodedValue) {\n            const payload = encodedValue.split('|')\n\n            if (payload.length < 2) {\n                super.throwInvalidValueErr()\n            }\n\n            const actionTypeId = payload[0]\n            const actionId = payload[1]\n\n            const renderable = ['item', 'ship_position']\n\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n                return this.renderItem(this.actor, actionId)\n            }\n\n            if (actionTypeId === 'ship_position') {\n                const subActionId = payload[2]\n                await this.#handleShipAction(event, this.actor, actionId, subActionId)\n            } else {\n                const knownCharacters = ['traveller', 'animal', 'robot']\n\n                // If single actor is selected\n                if (this.actor) {\n                    await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId)\n                    return\n                }\n\n                const controlledTokens = canvas.tokens.controlled\n                    .filter((token) => knownCharacters.includes(token.actor?.type))\n\n                // If multiple actors are selected\n                for (const token of controlledTokens) {\n                    const actor = token.actor\n                    await this.#handleAction(event, actor, token, actionTypeId, actionId)\n                }\n            }\n        }\n\n        /**\n         * Handle action hover\n         * Called by Token Action HUD Core when an action is hovered on or off\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionHover (event, encodedValue) {}\n\n        /**\n         * Handle group click\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n         * @override\n         * @param {object} event The event\n         * @param {object} group The group\n         */\n        async handleGroupClick (event, group) {}\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event        The event\n         * @param {object} actor        The actor\n         * @param {object} token        The token\n         * @param {string} actionTypeId The action type id\n         * @param {string} actionId     The actionId\n         */\n        async #handleAction (event, actor, token, actionTypeId, actionId) {\n            switch (actionTypeId) {\n            case 'item':\n                this.#handleItemAction(event, actor, actionId)\n                break\n            case 'characteristics':\n                this.#handleCharacteristicAction(event, actor, actionId)\n                break\n            case 'utility':\n                this.#handleUtilityAction(token, actionId)\n                break\n            }\n        }\n\n        /**\n         * Handle item action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #handleItemAction (_event, actor, actionId) {\n            const item = actor.items.get(actionId)\n            if (item.type === 'trait') {\n                await this.#sendToChat(item, false)\n            } else if (item.type === 'weapon') {\n                item.resolveUnknownAutoMode()\n            } else if (item.type === 'psiAbility') {\n                let diceRoll\n                if (item.actor?.system.characteristics.psionicStrength.current <= 0) {\n                    ui.notifications.warn(game.i18n.localize('TWODSIX.Warnings.NoPsiPoints'))\n                    return\n                } else if (!game.settings.get('twodsix', 'psiTalentsRequireRoll')) {\n                    await this.#sendToChat(item, true)\n                } else {\n                    diceRoll = await item.skillRoll(true)\n                }\n\n                if (item.type === 'psiAbility') {\n                    await item.processPsiAction(diceRoll?.effect ?? 0)\n                }\n            } else {\n                item.skillRoll(true)\n            }\n        }\n\n        /**\n         * Handle send to chat\n         * @private\n         * @param {object} item    an item\n         * @param {boolean} usedForRoll whether item used for roll\n         */\n        async #sendToChat (item, usedForRoll) {\n            const picture = item.img\n            const capType = game.i18n.localize(`TYPES.Item.${item.type}`).capitalize()\n            let msg = `<div style=\"display: inline-flex;\"><img src=\"${picture}\" alt=\"\" class=\"chat-image\"></img><span style=\"align-self: center; text-align: center; padding-left: 1ch;\">`\n            msg += usedForRoll ? `${game.i18n.localize('TWODSIX.Items.Psionics.Used')} ${capType}: ${item.name}</span></div>` : `<strong>${capType}: ${item.name}</strong></span></div><br>${item.system.description}`\n            await ChatMessage.create({ content: msg, speaker: ChatMessage.getSpeaker({ actor: item.actor }) })\n        }\n\n        /**\n         * Handle characteristic action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleCharacteristicAction (_event, actor, actionId) {\n            actor.characteristicRoll({ rollModifiers: { characteristic: actor.system.characteristics[actionId].shortLabel } }, true)\n        }\n\n        /**\n         * Handle characteristic action\n         * @private\n         * @param {object} event\n         * @param {object} ship    The ship\n         * @param {string} positionId The ship position id\n         * @param {string} actionId The action id\n         */\n        async #handleShipAction (event, ship, positionId, actionId) {\n            const shipPosition = ship.items.get(positionId)\n            const action = shipPosition?.system?.actions[actionId]\n            if (action) {\n                let actor = game.user.character ?? shipPosition.system.actors?.[0]\n                if (!actor) {\n                    const actorId = Object.keys(ship.system.shipPositionActorIds).find(key => JSON.stringify(ship.system.shipPositionActorIds[key]) === JSON.stringify(positionId))\n                    if (actorId) {\n                        actor = game.actors.get(actorId)\n                    }\n                    if (!actor) {\n                        ui.notifications.warn(game.i18n.localize('TWODSIX.Ship.NoActorsForAction'))\n                        return\n                    }\n                }\n\n                const component = ship.items.find(item => item.id === action.component)\n                const extra = {\n                    actor,\n                    ship,\n                    event,\n                    component,\n                    actionName: action.name,\n                    positionName: shipPosition?.name ?? '',\n                    diceModifier: ''\n                }\n                ship.doShipAction(action, extra)\n            }\n        }\n\n        /**\n         * Handle utility action\n         * @private\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #handleUtilityAction (token, actionId) {\n            switch (actionId) {\n            case 'endTurn':\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            }\n        }\n    }\n})\n","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n    game.settings.register(MODULE.ID, 'displayUnequipped', {\n        name: game.i18n.localize('tokenActionHud.twodsix.settings.displayUnequipped.name'),\n        hint: game.i18n.localize('tokenActionHud.twodsix.settings.displayUnequipped.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            coreUpdate(value)\n        }\n    })\n    game.settings.register(MODULE.ID, 'sortByType', {\n        name: game.i18n.localize('tokenActionHud.twodsix.settings.sortByType.name'),\n        hint: game.i18n.localize('tokenActionHud.twodsix.settings.sortByType.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            coreUpdate(value)\n        }\n    })\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler () {\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Core Twodsix'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}        The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults () {\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        registerStyles () {\n            return {\n                template: {\n                    class: 'tah-style-template-style', // The class to add to first DIV element\n                    file: 'tah-template-style', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'Template Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","item","characteristics","utility","shipPosition","GROUP","armor","id","name","type","augment","equipment","consumable","backpack","ship","base","vehicle","skills","spell","psiAbility","weapons","combat","token","tool","trait","shipActions","ITEM_TYPE","groupId","computer","treasure","junk","weapon","CHARACTERISTICS","strength","dexterity","endurance","intelligence","education","socialStanding","psionicStrength","stamina","lifeblood","alternative1","alternative2","alternative3","Utils","Hooks","once","async","coreModule","static","key","defaultValue","value","game","settings","get","api","Logger","debug","set","ActionHandler","shouldDisplayChar","char","charsShown","includes","camelCase","string","trim","toLowerCase","replace","m","chr","toUpperCase","groupIds","this","actors","actor","_getActors","actorType","displayUnequipped","getSetting","sortByType","items","sortItemsByName","buildCharacterActions","buildShipPositions","buildInventory","buildCharacteristics","buildMultipleTokenActions","size","actionTypeId","inventoryMap","Map","itemId","itemData","equipped","system","typeMap","groupData","actions","map","actionTypeName","i18n","listName","encodedValue","join","delimiter","img","addActions","undefined","displayShortLabel","push","parentGroupData","position","itemTypes","ship_position","newPosition","addGroup","shipActionId","Object","keys","action","icon","DEFAULTS","groups","values","forEach","group","groupsArray","layout","nestId","rests","RollHandler","register","coreUpdate","localize","hint","scope","config","Boolean","default","onChange","event","payload","split","length","super","throwInvalidValueErr","actionId","isRenderItem","renderItem","subActionId","handleShipAction","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","filter","handleItemAction","handleCharacteristicAction","handleUtilityAction","_event","sendToChat","resolveUnknownAutoMode","diceRoll","current","ui","notifications","warn","skillRoll","processPsiAction","effect","usedForRoll","picture","capType","capitalize","msg","description","ChatMessage","create","content","speaker","getSpeaker","characteristicRoll","rollModifiers","characteristic","shortLabel","positionId","user","character","actorId","shipPositionActorIds","find","JSON","stringify","component","extra","actionName","positionName","diceModifier","doShipAction","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","systemSettings.register","registerStyles","template","class","file","moduleId","on","module","modules","requiredCoreModuleVersion","call"],"mappings":"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"}